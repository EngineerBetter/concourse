// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/worker"
)

type FakeContainerPlacementStrategy struct {
	CandidatesStub        func(lager.Logger, []worker.Worker, worker.ContainerSpec) ([]worker.Worker, error)
	candidatesMutex       sync.RWMutex
	candidatesArgsForCall []struct {
		arg1 lager.Logger
		arg2 []worker.Worker
		arg3 worker.ContainerSpec
	}
	candidatesReturns struct {
		result1 []worker.Worker
		result2 error
	}
	candidatesReturnsOnCall map[int]struct {
		result1 []worker.Worker
		result2 error
	}
	PickStub        func(lager.Logger, worker.Worker, worker.ContainerSpec) error
	pickMutex       sync.RWMutex
	pickArgsForCall []struct {
		arg1 lager.Logger
		arg2 worker.Worker
		arg3 worker.ContainerSpec
	}
	pickReturns struct {
		result1 error
	}
	pickReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerPlacementStrategy) Candidates(arg1 lager.Logger, arg2 []worker.Worker, arg3 worker.ContainerSpec) ([]worker.Worker, error) {
	var arg2Copy []worker.Worker
	if arg2 != nil {
		arg2Copy = make([]worker.Worker, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.candidatesMutex.Lock()
	ret, specificReturn := fake.candidatesReturnsOnCall[len(fake.candidatesArgsForCall)]
	fake.candidatesArgsForCall = append(fake.candidatesArgsForCall, struct {
		arg1 lager.Logger
		arg2 []worker.Worker
		arg3 worker.ContainerSpec
	}{arg1, arg2Copy, arg3})
	stub := fake.CandidatesStub
	fakeReturns := fake.candidatesReturns
	fake.recordInvocation("Candidates", []interface{}{arg1, arg2Copy, arg3})
	fake.candidatesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerPlacementStrategy) CandidatesCallCount() int {
	fake.candidatesMutex.RLock()
	defer fake.candidatesMutex.RUnlock()
	return len(fake.candidatesArgsForCall)
}

func (fake *FakeContainerPlacementStrategy) CandidatesCalls(stub func(lager.Logger, []worker.Worker, worker.ContainerSpec) ([]worker.Worker, error)) {
	fake.candidatesMutex.Lock()
	defer fake.candidatesMutex.Unlock()
	fake.CandidatesStub = stub
}

func (fake *FakeContainerPlacementStrategy) CandidatesArgsForCall(i int) (lager.Logger, []worker.Worker, worker.ContainerSpec) {
	fake.candidatesMutex.RLock()
	defer fake.candidatesMutex.RUnlock()
	argsForCall := fake.candidatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerPlacementStrategy) CandidatesReturns(result1 []worker.Worker, result2 error) {
	fake.candidatesMutex.Lock()
	defer fake.candidatesMutex.Unlock()
	fake.CandidatesStub = nil
	fake.candidatesReturns = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerPlacementStrategy) CandidatesReturnsOnCall(i int, result1 []worker.Worker, result2 error) {
	fake.candidatesMutex.Lock()
	defer fake.candidatesMutex.Unlock()
	fake.CandidatesStub = nil
	if fake.candidatesReturnsOnCall == nil {
		fake.candidatesReturnsOnCall = make(map[int]struct {
			result1 []worker.Worker
			result2 error
		})
	}
	fake.candidatesReturnsOnCall[i] = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerPlacementStrategy) Pick(arg1 lager.Logger, arg2 worker.Worker, arg3 worker.ContainerSpec) error {
	fake.pickMutex.Lock()
	ret, specificReturn := fake.pickReturnsOnCall[len(fake.pickArgsForCall)]
	fake.pickArgsForCall = append(fake.pickArgsForCall, struct {
		arg1 lager.Logger
		arg2 worker.Worker
		arg3 worker.ContainerSpec
	}{arg1, arg2, arg3})
	stub := fake.PickStub
	fakeReturns := fake.pickReturns
	fake.recordInvocation("Pick", []interface{}{arg1, arg2, arg3})
	fake.pickMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainerPlacementStrategy) PickCallCount() int {
	fake.pickMutex.RLock()
	defer fake.pickMutex.RUnlock()
	return len(fake.pickArgsForCall)
}

func (fake *FakeContainerPlacementStrategy) PickCalls(stub func(lager.Logger, worker.Worker, worker.ContainerSpec) error) {
	fake.pickMutex.Lock()
	defer fake.pickMutex.Unlock()
	fake.PickStub = stub
}

func (fake *FakeContainerPlacementStrategy) PickArgsForCall(i int) (lager.Logger, worker.Worker, worker.ContainerSpec) {
	fake.pickMutex.RLock()
	defer fake.pickMutex.RUnlock()
	argsForCall := fake.pickArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerPlacementStrategy) PickReturns(result1 error) {
	fake.pickMutex.Lock()
	defer fake.pickMutex.Unlock()
	fake.PickStub = nil
	fake.pickReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerPlacementStrategy) PickReturnsOnCall(i int, result1 error) {
	fake.pickMutex.Lock()
	defer fake.pickMutex.Unlock()
	fake.PickStub = nil
	if fake.pickReturnsOnCall == nil {
		fake.pickReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pickReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerPlacementStrategy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.candidatesMutex.RLock()
	defer fake.candidatesMutex.RUnlock()
	fake.pickMutex.RLock()
	defer fake.pickMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerPlacementStrategy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.ContainerPlacementStrategy = new(FakeContainerPlacementStrategy)
